{"ast":null,"code":"import axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { BACKEND_URL } from '../constants/urls';\nlet creds = sessionStorage.getItem('creds');\n\nif (creds) {\n  creds = JSON.parse(creds);\n  sessionStorage.clear();\n} else {\n  creds = {};\n}\n\nwindow.addEventListener('unload', () => {\n  sessionStorage.setItem('creds', JSON.stringify(creds));\n});\nexport const getCreds = () => {\n  return creds;\n};\nexport const setCreds = updatedCreds => {\n  creds = { ...creds,\n    ...updatedCreds\n  };\n};\nexport const deleteCreds = () => {\n  creds = {};\n};\n\nconst getNewToken = () => {\n  const headers = {};\n\n  if (creds.refreshToken) {\n    headers.Authorization = 'Bearer ' + creds.refreshToken;\n  }\n\n  return new Promise((resolve, reject) => {\n    axios.get(BACKEND_URL + '/refresh', {\n      withCredentials: true,\n      headers\n    }).then(res => {\n      if (res.data) {\n        console.log(creds);\n        setCreds({\n          accessToken: res.data\n        });\n        console.log(creds);\n        resolve(res);\n      } else {\n        reject(res);\n      }\n    }).catch(err => {\n      reject(err);\n    });\n  });\n};\n\nexport const makeAuthorizedRequest = (path, payload, options = {}) => {\n  const headers = {};\n\n  if (creds.accessToken) {\n    headers.Authorization = 'Bearer ' + creds.accessToken;\n  }\n\n  return new Promise((resolve, reject) => {\n    if (payload) {\n      axios.post(BACKEND_URL + path, payload, {\n        withCredentials: true,\n        headers\n      }).then(res => {\n        resolve(res);\n      }).catch(err => {\n        if (err.response && err.response.status == 401) {\n          getNewToken.then(() => {\n            headers.Authorization = 'Bearer ' + creds.accessToken;\n            axios.post(BACKEND_URL + path, payload, {\n              withCredentials: true,\n              headers\n            }).then(res => {\n              resolve(res);\n            }).catch(err => {\n              reject(err);\n            });\n          }).catch(err => {\n            if (err.reponse.status == 401) {\n              if (options.history) {\n                options.history.push('/login');\n              }\n            } else {\n              reject(err);\n            }\n          });\n        } else {\n          reject(err);\n        }\n      });\n    } else {\n      axios.get(BACKEND_URL + path, {\n        withCredentials: true,\n        headers\n      }).then(res => {\n        resolve(res);\n      }).catch(err => {\n        if (err.response && err.response.status == 401) {\n          getNewToken().then(() => {\n            headers.Authorization = 'Bearer ' + creds.accessToken;\n            axios.get(BACKEND_URL + path, {\n              withCredentials: true,\n              headers\n            }).then(res => {\n              resolve(res);\n            }).catch(err => {\n              reject();\n            });\n          }).catch(err => {\n            if (err.response && err.response.status == 401) {\n              if (options.history) {\n                options.history.push('/login');\n              }\n            } else {\n              reject();\n            }\n          });\n        } else {\n          reject();\n        }\n      });\n    }\n  });\n};","map":{"version":3,"sources":["/Users/gabbybanaag/Desktop/momentum/src/utilities/MomentumRequests.js"],"names":["axios","useHistory","BACKEND_URL","creds","sessionStorage","getItem","JSON","parse","clear","window","addEventListener","setItem","stringify","getCreds","setCreds","updatedCreds","deleteCreds","getNewToken","headers","refreshToken","Authorization","Promise","resolve","reject","get","withCredentials","then","res","data","console","log","accessToken","catch","err","makeAuthorizedRequest","path","payload","options","post","response","status","reponse","history","push"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { useHistory } from 'react-router-dom'\nimport { BACKEND_URL } from '../constants/urls'\n\nlet creds = sessionStorage.getItem('creds');\nif (creds) {\n    creds = JSON.parse(creds);\n    sessionStorage.clear();\n\n} else {\n    creds = {};\n}\n\nwindow.addEventListener('unload', () => {\n    sessionStorage.setItem('creds', JSON.stringify(creds));\n})\n\nexport const getCreds = () => {\n    return creds;\n}\n\n\nexport const setCreds = (updatedCreds) => {\n    creds = {...creds, ...updatedCreds};\n}\n\nexport const deleteCreds = () => {\n    creds = {};\n}\n\nconst getNewToken = () => {\n    const headers = {}\n    if (creds.refreshToken) {\n        headers.Authorization = 'Bearer ' + creds.refreshToken;\n    }\n    return new Promise((resolve, reject) => {\n        axios.get(BACKEND_URL + '/refresh', {withCredentials: true, headers}).then((res) => {\n            if (res.data) {\n                console.log(creds)\n                setCreds({accessToken: res.data});\n                console.log(creds)\n                resolve(res);\n            } else {\n                reject(res);\n            }\n\n        })\n        .catch((err) => {\n            reject(err);\n        })\n    });\n\n}\nexport const makeAuthorizedRequest = (path, payload, options={}) => {\n    const headers = {};\n    if (creds.accessToken) {\n        headers.Authorization = 'Bearer ' + creds.accessToken;\n    }\n\n    return new Promise((resolve, reject) => {\n        if (payload) {\n            axios.post(BACKEND_URL + path, payload, {withCredentials: true, headers})\n            .then(res=>{\n                resolve(res)\n            })\n            .catch(err => {\n                if (err.response && err.response.status == 401) {\n                    getNewToken.then(()=>{\n                        headers.Authorization = 'Bearer ' + creds.accessToken;\n                        axios.post(BACKEND_URL + path, payload, {withCredentials: true, headers})\n                        .then((res)=>{\n                            resolve(res);\n                        })\n                        .catch(err => {\n                            reject(err);\n                        })\n                    })\n                    .catch(err => {\n                        if (err.reponse.status == 401) {\n                            if (options.history) {\n                                options.history.push('/login');\n                            }\n                        } else {\n                            reject(err);\n                        }\n                    })\n                } else {\n                    reject(err);\n                }\n            });\n        } else {\n            axios.get(BACKEND_URL + path, {withCredentials: true, headers}).then(res=>{resolve(res)}).catch(err => {\n                if (err.response && err.response.status == 401) {\n                    getNewToken().then(()=>{\n                        headers.Authorization = 'Bearer ' + creds.accessToken;\n                        axios.get(BACKEND_URL + path, {withCredentials: true, headers})\n                        .then((res)=>{\n                            resolve(res);\n                        })\n                        .catch(err => {\n                            reject();\n                        })\n                    })\n                    .catch(err => {\n                        if (err.response && err.response.status == 401) {\n                            if (options.history) {\n                                options.history.push('/login');\n                            }\n                        } else {\n                            reject();\n                        }\n                    })\n                } else {\n                    reject();\n                }\n            });\n        }\n    });\n\n}"]},"metadata":{},"sourceType":"module"}